library(dplyr)
getwd()
setwd("..")
getwd()
getwd()
setwd("/udg-r")
setwd("C:/Users/JorgeFausto/Desktop/udg-r/")
install.packages("readr")
censo_puebra <- readr::read_csv("./21_CensoPoblacionVivienda2020.csv")
censo_puebla <- readr::read_csv("./21_CensoPoblacionVivienda2020.csv")
censo_puebla
str(censo_puebla)
type.convert(censo_puebla, as.is=T) |> str()
censo_puebla <- readr::read_csv("./21_CensoPoblacionVivienda2020.csv", col_select=c(NOM_ENT, NOM_MUN, NOM_LOC,
POBTOT, POBFEM, POBMAS, GRAPROES, GRAPROES_F, GRAPROES_M, PEA, PEA_F, PEA_M,POCUPADA,
POCUPADA_F, POCUPADA_M))
censo_puebla <- readr::read_csv("./21_CensoPoblacionVivienda2020.csv", col_select=c(NOM_ENT, NOM_MUN, NOM_LOC,
POBTOT, POBFEM, POBMAS, GRAPROES, GRAPROES_F, GRAPROES_M, PEA, PEA_F, PEA_M,POCUPADA,
POCUPADA_F, POCUPADA_M), col_types = c("c","c","c","n","n","n","n","n","n","n","n",
"n","n","n","n"))
summary(censo_puebla)
censo_puebla$GRAPROES_F
censo_puebla$POBTOT <- as.numeric(censo_puebla$POBTOT)
censo_puebla$POBFEM <- as.numeric(censo_puebla$POBFEM)
censo_puebla$POBTOT <- as.numeric(censo_puebla$POBTOT)
censo_puebla$POBFEM <- as.numeric(censo_puebla$POBFEM)
censo_puebla$POBMAS <- as.numeric(censo_puebla$POBMAS)
censo_puebla$GRAPROES <- as.numeric(censo_puebla$GRAPROES)
censo_puebla$GRAPROES_F <- as.numeric(censo_puebla$GRAPROES_F)
censo_puebla$GRAPROES_M <- as.numeric(censo_puebla$GRAPROES_M)
censo_puebla$POCUPADA <- as.numeric(censo_puebla$POCUPADA)
censo_puebla$POCUPADA_F <- as.numeric(censo_puebla$POCUPADA_F)
censo_puebla$POCUPADA_M <- as.numeric(censo_puebla$POCUPADA_M)
censo_puebla$PEA <- as.numeric(censo_puebla$PEA)
censo_puebla$PEA_F <- as.numeric(censo_puebla$PEA_F)
censo_puebla$PEA_M <- as.numeric(censo_puebla$PEA_M)
|> filter(NOM_MUN != 'Total de la entidad Puebla')
municipios <- censo_puebla |> group_by(NOM_MUN) |> summarise(across(POBTOT:POCUPADA_M, sum, na.rm = T)) |> filter(NOM_MUN != 'Total de la entidad Puebla')
barplot(municipios$POBTOT)
boxplot(municipios$POBFEM ~ municipios$NOM_MUN)
plot(municipios$POBMAS, municipios$POBFEM)
max(municipios$POBTOT)
barplot(municipios$POBTOT[municipios$NOM_MUN != 'Puebla'])
boxplot(municipios$POBFEM[municipios$NOM_MUN != 'Puebla'] ~ municipios$POBTOT[municipios$NOM_MUN != 'Puebla'])
boxplot(municipios$POBFEM[municipios$NOM_MUN != 'Puebla'] ~ municipios$NOM_MUN != 'Puebla')
boxplot(municipios$POBFEM[municipios$NOM_MUN != 'Puebla'] ~ municipios$NOM_MUN[[municipios$NOM_MUN != 'Puebla']])
boxplot(municipios$POBFEM[municipios$NOM_MUN != 'Puebla'] ~ municipios$NOM_MUN[municipios$NOM_MUN != 'Puebla'])
plot(municipios$POBMAS[municipios$NOM_MUN != 'Puebla'],municipios$POBFEM[municipios$NOM_MUN != 'Puebla'])
plot(municipios$PEA_M, municipios$PEA_F)
install.packages("readxl")
readxl::read_xlsx("./21_EncuestaOcupacionEmpleo.xlsx")
readxl::read_xlsx("./21_EncuestaOcupacionEmpleo.xlsx", skip=5, sheet=1)
readxl::read_xlsx("./21_EncuestaOcupacionEmpleo.xlsx", skip=4, sheet=1)
readxl::read_xlsx("./21_EncuestaOcupacionEmpleo.xlsx", skip=4, sheet=1, range=c("F5:CK40"))
ocupacion <- readxl::read_xlsx("./21_EncuestaOcupacionEmpleo.xlsx", skip=4, sheet=1, range=c("F5:CK40"))
#Transformar el df de ancho a largo
# son las columnas que se van a transformar de ancho a largo
# columna que ccontendra los valores de las columnas anteriores
# columnas de tiempo
#nombre de la columna que contendra el tiempo
mujeres_ocupadas <- ocupacion |> reshape(direction="long", idvar = names(ocupacion)[1], varying = 2:84, v.names = "valor", times = names(ocupacion)[2:84], timevar =  "temporada", new.row.names = 1:2905) |> dplyr::filter(indicador= "Población ocupada - 15 años y más, mujeres")|> mutate(valor = as.numeric(valor), temporada = as.factor(temporada)) |> filter(!is.na(valor))
mujeres_ocupadas
#Transformar el df de ancho a largo
# son las columnas que se van a transformar de ancho a largo
# columna que ccontendra los valores de las columnas anteriores
# columnas de tiempo
#nombre de la columna que contendra el tiempo
mujeres_ocupadas <- ocupacion |> reshape(direction="long", idvar = names(ocupacion)[1], varying = 2:84, v.names = "valor", times = names(ocupacion)[2:84], timevar =  "temporada", new.row.names = 1:2905) |> dplyr::filter(indicador= "Población ocupada - 15 años y más, mujeres")|> mutate(valor = as.numeric(valor), temporada = as.factor(temporada)) |> filter(!is.na(valor))
mujeres_ocupadas
#Transformar el df de ancho a largo
# son las columnas que se van a transformar de ancho a largo
# columna que ccontendra los valores de las columnas anteriores
# columnas de tiempo
#nombre de la columna que contendra el tiempo
mujeres_ocupadas <- ocupacion |> reshape(direction="long", idvar = names(ocupacion)[1], varying = 2:84, v.names = "valor", times = names(ocupacion)[2:84], timevar =  "temporada", new.row.names = 1:2905) |> dplyr::filter(indicador== "Población ocupada - 15 años y más, mujeres")|> mutate(valor = as.numeric(valor), temporada = as.factor(temporada)) |> filter(!is.na(valor))
mujeres_ocupadas
View(mujeres_ocupadas)
plot(mujeres_ocupadas$temporada, mujeres_ocupadas$valor)
#interpretar datos
mujeres_ocupadas |> summarise(max = max(valor, na.rm = T), min = min(valor, na.rm = T), media = mean(valor, na.rm=T), desv=sd(valor, na.rm=T))
mujeres_ocupadas <- mujeres_ocupadas |> mutate(año = substr(temporada,1,4), temp = substr(temporada, 6, 7), año = as.factor(año), temp = as.factor(temp))
mujeres_ocupadas
boxplot(mujeres_ocupadas$valor, mujeres_ocupadas$año)
boxplot(mujeres_ocupadas$valor ~ mujeres_ocupadas$año)
boxplot(mujeres_ocupadas$valor ~ mujeres_ocupadas$temp)
boxplot(mujeres_ocupadas$valor ~ mujeres_ocupadas$temporada)
boxplot(mujeres_ocupadas$valor ~ mujeres_ocupadas$año)
boxplot(mujeres_ocupadas$valor ~ mujeres_ocupadas$temp)
mujeres_ocupadas |> group_by(temp) |> summarise(max = max(valor, na.rm = T), min = min(valor, na.rm = T), media = mean(valor, na.rm=T), desv=sd(valor, na.rm=T))
mujeres_ocupadas |> group_by(temp) |> summarise(max = max(valor, na.rm = T), min = min(valor, na.rm = T), media = mean(valor, na.rm=T), desv=sd(valor, na.rm=T))
mujeres_ocupadas |> group_by(temp) |> summarise(max = max(valor), min = min(valor), media = mean(valor), desv=sd(valor))
mujeres_ocupadas |> group_by(año) |> summarise(max = max(valor), min = min(valor), media = mean(valor), desv=sd(valor))
library(dslabs)
data(heights)
sexo_codificado <- ifelse(heights$sex == "Female", 1, 2)
# Calcular la suma
suma <- sum(sexo_codificado)
suma
mayores_72 <- ifelse(heights$height > 72, 1, 0)
# Calcular la media
mean(mayores_72)
inches_to_ft <- function(x) {
x / 12
}
inches_to_ft(144)
sum(heights$height < 60)
any(T,T,F)
all(F,F,F)
all(T,T,F)
any(F,F,F)
any(T,F,F)
any(T,F,F)
any(T,F,F)
all(T,T,T)
all(T,F,F)
any(T,T,T)
all(T,F,F)
m <- 10
for (n in 1:m) {
print(n)
}
install.packages("datatables")
install.packages("DT")
library(dslabs)
library(DT)
datatable(coronavirus)
data(coranavirus)
data("coranavirus")
library(ggplot2)
datos <- data.frame(alturas = c(160, 160, 160, 158, 180, 178, 190,153, 154, 174, 164, 148))
ggplot((datos, aes(x = altura))) + geom_histogram(binwidth = 5, fill = "lightblue",color="black", alpha = 0.7)
ggplot((datos, aes(x = altura))) + geom_histogram(binwidth = 5, fill = "lightblue",color="black", alpha = 0.7)
ggplot(datos, aes(x = altura)) + geom_histogram(binwidth = 5, fill = "lightblue",color="black", alpha = 0.7)
ggplot(datos, aes(x = alturas)) + geom_histogram(binwidth = 5, fill = "lightblue",color="black", alpha = 0.7)
ggplot(datos, aes(x = alturas)) + geom_histogram(binwidth = 1, fill = "lightblue",color="black", alpha = 0.7)
ggplot(datos, aes(x = alturas)) + geom_histogram(binwidth = 6, fill = "lightblue",color="black", alpha = 0.7)
ggplot(datos, aes(x = alturas)) + geom_histogram(binwidth = 6, fill = "lightblue",color="black", alpha = 0.7) + labs(title= "Histograma altura", x="Altura (cm)", y="Frecuencia")
ggplot(datos, aes(x = alturas)) + geom_histogram(binwidth = 6, fill = "lightblue",color="black", alpha = 0.7) + labs(title= "Histograma altura", x="Altura (cm)", y="Frecuencia") + theme_minimal()
ggplot(datos, aes(x = alturas)) +
geom_density(fill = "skyblue", alpha=0.5) +
labs(title= "Histograma altura", x="Altura (cm)", y="Frecuencia") + theme_minimal()
ggplot(datos, aes(x = alturas)) +
geom_histogram(aes(y=..density..), binwidth = 5, fill="lightblue", color="black", alpha=0.5) +
geom_density(color="blue", size=1) +
labs(title= "Histograma altura", x="Altura (cm)", y="Frecuencia") + theme_minimal()
#histograma + suavidad
ggplot(datos, aes(x = alturas)) +
geom_histogram(aes(y=..density..), binwidth = 4, fill="lightblue", color="black", alpha=0.5) +
geom_density(color="blue", size=1) +
labs(title= "Histograma altura", x="Altura (cm)", y="Frecuencia") + theme_minimal()
#ejercicio 1
puntuaciones <- rnorm(100, mean=75, sd=10)
puntuaciones
probabilidad <- 1  - pnorm(80, mean = (puntuaciones), sd = sd(puntuaciones))
probabilidad
probabilidad <- 1  - pnorm(80, mean = (puntuaciones), sd = sd(puntuaciones))
probabilidad
#ejercicio 1
puntuaciones <- rnorm(100, mean=75, sd=10)
probabilidad <- 1 - pnorm(80, mean = (puntuaciones), sd = sd(puntuaciones))
probabilidad
probabilidad <- 1 - pnorm(80, mean = mean(puntuaciones), sd = sd(puntuaciones))
probabilidad
vector1 <- c(18,45,32,20)
vector2 <- c(45,23,9, 78)
vector3 <- vector1 + vector2
vector3
vector3 <- c(vector1) + c(vector2)
vector3
VECTOR3 <- c(vector1, vector2)
vector3
vector1 <- c(18,45,32,20)
vector2 <- c(45,23,9, 78)
VECTOR3 <- c(vector1, vector2)
vector3
vector3 <- c(vector1, vector2)
vector3
library(dslabs)
data("mtcars")
datatable(mtcars)
puntuaciones <- mtcars$mpg
q1 <- quantile(puntuales, 0.25)
q1 <- quantile(puntuaciones, 0.25)
q2 <- quantile(puntuaciones, 0.5)
q3 <- quantile(puntuaciones, 0.75)
q1
q2
q3
median(puntuaciones)
cat("Q1: ", q1, "\n")
cat("Q2: ", q2, "\n")
cat("Q3: ", q3, "\n")
boxplot(puntuaciones, main='Boxplot de mpg', ylab='Millas por galon', col='lightblue', border = "darkblue")
tiempo1 <- rnorm(100, mean=10, sd=2)
tiempo2 <- rnorm(100, mean=15, sd=3)
media1  <- mean(tiempo1)
sd1 <- sd(tiempo1)
media2  <- mean(tiempo2)
sd2 <- sd(tiempo2)
cat("Dato", media1, "sd", sd1, "\n")
cat("Dato", media2, "sd", sd2, "\n")
tiempo3 <- rnorm(1000, mean=50, sd=10)
set.seed(123)
media3  <- mean(tiempo3)
sd3 <- sd(tiempo3)
cat("Dato", media3, "sd", sd3, "\n")
cat("Mediana: ", media3, ", Desviacion estandar: ", sd3, "\n")
cat("Mediana: ", media3, ",Desviacion estandar: ", sd3, "\n")
cat("Mediana de la distribucion normal: ", media3, ",Desviacion estandar de la distr normal: ", sd3, "\n")
set.seed(123)
tiempo3 <- rnorm(1000, mean=50, sd=10)
media3  <- mean(tiempo3)
sd3 <- sd(tiempo3)
cat("Mediana de la distribucion normal: ", media3, ",Desviacion estandar de la distr normal: ", sd3, "\n")
library(readr)
salida <- read_csv("C:/Users/JorgeFausto/Downloads/salida.xls")
View(salida)
var()
set.seed(456)
tiempo4 <- rbinom(1000, size=10, prob=0.3)
mean(prueba)
prueba <- rbinom(1000, size=10, prob=0.3)
mean(prueba)
var(prueba)
datos <- rnorm(100)
histograma <- hist(datos, plot=F)
hist(datos)
histograma$breaks[-1]
indice_rojo <- which(valor_objetivo >= histograma$breaks[-length(histograma$breaks)] & valor valor_objetivo < histograma$breaks[-1])
valor_objetivo <- 0
indice_rojo <- which(valor_objetivo >= histograma$breaks[-length(histograma$breaks)] & valor valor_objetivo < histograma$breaks[-1])
indice_rojo <- which(valor_objetivo >= histograma$breaks[-length(histograma$breaks)] & valor_objetivo < histograma$breaks[-1])
indice_rojo <- which(valor_objetivo >= histograma$breaks[-length(histograma$breaks)] & valor_objetivo < histograma$breaks[-1])
colores <- rep("gray",length(histograma$counts))
colores[indice_rojo]<- "red"
plot(histograma, col= colores, main = "Histograma con barra resaltada", xlab="Valor", ylab = "Frecuencia")
colores[indice_rojo + 1] <- "blue"
plot(histograma, col= colores, main = "Histograma con barra resaltada", xlab="Valor", ylab = "Frecuencia")
library(dslabs)
data("mtcars")
mtcars
ggplot(mtcars, aes(x=cyl, y=mpg))
library(ggplot2)
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(cyl) ))
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(cyl) )) +
geom_boxplot()
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(cyl) )) +
geom_boxplot() +
labs(title = "Boxplot de mpg", x="Numero de cilindros", y="Millas por galón")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(cyl) )) +
geom_boxplot() +
labs(title = "Boxplot de mpg", x="Numero de cilindros", y="Millas por galón") +
scale_fill_manual(values = c("4" = "yellow", "6" = "black", "8" = "salmon"))
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(cyl) )) +
geom_boxplot() +
labs(title = "Boxplot de mpg", x="Numero de cilindros", y="Millas por galón") +
scale_fill_manual(values = c("4" = "yellow", "6" = "black", "8" = "salmon"))+
theme_gray()
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl, levels = sort(unique(mtcars$cyl)))
conteo_cilindros <- table(mtcars$cyl)
barplot(conteo_cilindros,
main = "Distribución de Modelos por Número de Cilindros",
xlab = "Número de Cilindros",
ylab = "Cantidad de Modelos",
col = c("skyblue", "orange", "seagreen"),
border = "black",
ylim = c(0, max(conteo_cilindros) + 2))
text(x = barplot(conteo_cilindros, plot = FALSE),
y = conteo_cilindros,
label = conteo_cilindros,
pos = 3,
cex = 1,
col = "black")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 5) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15) +
theme(legend.position = "none")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 5) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15) +
theme(legend.position = "left")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 5) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15) +
theme(legend.position = "none")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 5) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15, base_line_size = 0) +
theme(legend.position = "none")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 15) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15) +
theme(legend.position = "none")
ggplot(mtcars, aes(x = cyl, fill = cyl)) +
geom_bar(color = "black") +
geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, size = 5) +
labs(
title = "Distribución de Modelos por Número de Cilindros",
x = "Número de Cilindros",
y = "Cantidad de Modelos"
) +
scale_fill_manual(values = c("skyblue", "orange", "seagreen")) +
theme_minimal(base_size = 15) +
theme(legend.position = "none")
df_nile <- data.frame(
year = time(Nile),
nivel = as.numeric(Nile)
)
ggplot(df_nile, aes(x = year, y = nivel)) +
geom_line(color = "steelblue", size = 1) +
labs(title = "Serie Temporal de los Niveles del Río Nilo",
x = "Año",
y = "Nivel del Río Nilo") +
theme_minimal(base_size = 15) +
geom_point(color = "darkblue", size = 1.5, alpha = 0.6)
df_nile <- data.frame(
year = time(Nile),
nivel = as.numeric(Nile)
)
ggplot(df_nile, aes(x = year, y = nivel)) +
geom_line(color = "steelblue", size = 1) +
labs(title = "Serie Temporal de los Niveles del Río Nilo",
x = "Año",
y = "Nivel del Río Nilo") +
theme_minimal(base_size = 15) +
geom_point(color = "darkblue", size = 1.5, alpha = 0.6)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 5)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 2)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3, alpha = 90)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3, alpha = 5)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3, alpha = 0.5)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3, alpha = 0.5) +
geom_smooth(method = "lm", se = T)
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "blue", size = 3, alpha = 0.5) +
geom_smooth(method = "auto", se = T)
library(dplyr)
data("economics")
datos <- economics |>
select(date, ingreso = psavert, gasto = unemploy) |>
tidyr::pivot_longer(cols = c("ingreso", "gasto"), names_to = "Tipo", values_to = "Valor")
install.packages("tidyr")
library(dplyr)
data("economics")
datos <- economics |>
select(date, ingreso = psavert, gasto = unemploy) |>
tidyr::pivot_longer(cols = c("ingreso", "gasto"), names_to = "Tipo", values_to = "Valor")
ggplot(datos, aes(x = date, y = Valor, fill = Tipo)) +
geom_area(alpha = 0.6, position = 'identity') +
scale_fill_manual(values = c("skyblue", "red"), labels = c("Gasto (Desempleo)", "Ingreso (Ahorro personal %)")) +
labs(title = "Evolución Trimestral del Ingreso y Gasto",
x = "Fecha",
y = "Valor",
fill = "Tipo") +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7)
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7) +
geom_area(aes(y = uempmed, fill = "Gasto"), alpha = 0.7) +
scale_fill_manual(values = c("skyblue","red"))
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7) +
geom_area(aes(y = uempmed, fill = "Gasto"), alpha = 0.7) +
scale_fill_manual(values = c("Ingerso"= "skyblue","Gasto"="red"))
labs(title = "Evolución Trimestral del Ingreso y Gasto",
x = "Fecha",
y = "Valor",
fill = "Tipo")
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7) +
geom_area(aes(y = uempmed, fill = "Gasto"), alpha = 0.7) +
scale_fill_manual(values = c("Ingerso"= "skyblue","Gasto"="red")) +
labs(title = "Evolución Trimestral del Ingreso y Gasto",
x = "Fecha",
y = "Valor",
fill = "Tipo")
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7) +
geom_area(aes(y = uempmed, fill = "Gasto"), alpha = 0.7) +
scale_fill_manual(values = c("Ingerso"= "skyblue","Gasto"="red")) +
labs(title = "Evolución Trimestral del Ingreso y Gasto",
x = "Fecha",
y = "Valor",
fill = "Tipo") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45), hjust = 1)
economics |>
ggplot(aes(x = date)) +
geom_area(aes(y = psavert, fill = "Ingreso"), alpha = 0.7) +
geom_area(aes(y = uempmed, fill = "Gasto"), alpha = 0.7) +
scale_fill_manual(values = c("Ingreso"= "skyblue","Gasto"="red")) +
labs(title = "Evolución Trimestral del Ingreso y Gasto",
x = "Fecha",
y = "Valor",
fill = "Tipo") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45), hjust = 1)
valore <- c(59000, 65000-59000)
etiquetas <- c("Valor original","Aumento")
valores <- c(59000, 65000-59000)
porcentajes <- round(valores / sum(valores)) + 100
etiqueta <- paste(etiquetas, "-", porcentajes, "%")
pie(valores,
labels = etiqueta,
col = c("skyblue","orange"),
main="Distribucion de nuevo valor")
porcentajes <- round(valores / sum(valores)) + 100
etiqueta <- paste(etiquetas, "-", porcentajes, "%")
pie(valores,
labels = etiqueta,
col = c("skyblue","orange"),
main="Distribucion de nuevo valor")
data <- data.frame(
categoria = c("Valor original","Aumento"),
valor = c(59000, 65000-59000)
)
data
ggplot(data, aes(x = "", y=valor, fill=categoria)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y"),
ggplot(data, aes(x = "", y=valor, fill=categoria)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
labs(title = "") +
theme_void()
